import type { TestCase } from '../types';

export type AzureDevOpsIntegrationResult = Record<string, {
    status: 'success' | 'error';
    workItemId?: number;
    error?: string;
}>;

// This function simulates a network request to the Azure DevOps REST API.
const mockAzureDevOpsApiCall = (payload: any): Promise<{ id: number; rev: number; }> => {
    return new Promise((resolve, reject) => {
        // Simulate network latency between 1-2 seconds
        setTimeout(() => {
            console.log("Simulating Azure DevOps API call with payload:", payload);

            // Simulate a potential random failure
            if (Math.random() < 0.1) { // 10% chance of failure
                reject(new Error("Azure DevOps API Error: TF401232: Work item type Test Case does not exist."));
                return;
            }

            const workItemId = Math.floor(Math.random() * 9000) + 1000;
            resolve({ id: workItemId, rev: 1 });
        }, 1000 + Math.random() * 1000);
    });
};

/**
 * Creates an XML-like string for the test steps field in Azure DevOps.
 * @param steps - An array of test step strings.
 * @returns An XML-formatted string.
 */
const formatTestStepsForAzureDevOps = (steps: string[]): string => {
    const stepMarkup = steps.map((step, index) => 
        `<step id="${index + 1}" type="ActionStep">
            <parameterizedString isformatted="true">&lt;p&gt;${step}&lt;/p&gt;</parameterizedString>
            <parameterizedString isformatted="true">&lt;p&gt;&lt;/p&gt;</parameterizedString>
        </step>`
    ).join('');
    return `<steps>${stepMarkup}</steps>`;
};


/**
 * Exports a list of test cases to Azure DevOps.
 * In a real-world application, this would handle OAuth 2.0 or Personal Access Token (PAT) authentication.
 * @param testCases - The array of test cases to export.
 * @param requirementId - The ID of the source requirement.
 * @returns A promise that resolves to a record of integration results.
 */
export const exportToAzureDevOps = async (
    testCases: TestCase[],
    requirementId: string
): Promise<AzureDevOpsIntegrationResult> => {
    
    // In a real application, you would handle authentication here.
    // const pat = getAzureDevOpsPat(); // Function to retrieve PAT securely
    // const headers = {
    //     'Content-Type': 'application/json-patch+json',
    //     'Authorization': 'Basic ' + btoa("" + ":" + pat)
    // };

    const results: AzureDevOpsIntegrationResult = {};

    for (const tc of testCases) {
        const description = `
            <div><b>Auto-generated by AI from requirement:</b> ${requirementId}</div>
            <div><b>Compliance References:</b> ${tc.compliance_reference.join(', ')}</div>
        `;

        // Azure DevOps uses a JSON Patch Document for creating work items
        const payload = [
            {
                "op": "add",
                "path": "/fields/System.Title",
                "value": `${tc.test_case_id}: ${tc.objective}`
            },
            {
                "op": "add",
                "path": "/fields/System.Description",
                "value": description
            },
            {
                "op": "add",
                "path": "/fields/Microsoft.VSTS.TCM.Steps",
                "value": formatTestStepsForAzureDevOps(tc.test_steps)
            },
            {
                "op": "add",
                "path": "/fields/Microsoft.VSTS.TCM.ExpectedResult",
                "value": tc.expected_result
            },
            {
                "op": "add",
                "path": "/fields/System.Tags",
                "value": `AI-Generated; ${requirementId}; ${tc.compliance_reference.join('; ')}`
            }
        ];

        try {
            // This is where the actual fetch call would be made.
            // const response = await fetch('https://dev.azure.com/{organization}/{project}/_apis/wit/workitems/$Test%20Case?api-version=7.1', {
            //     method: 'POST',
            //     headers: headers,
            //     body: JSON.stringify(payload)
            // });
            // if (!response.ok) { ... }
            // const data = await response.json();
            
            const data = await mockAzureDevOpsApiCall(payload);
            
            results[tc.test_case_id] = { status: 'success', workItemId: data.id };

        } catch (error) {
            results[tc.test_case_id] = { status: 'error', error: error instanceof Error ? error.message : 'An unknown error occurred' };
        }
    }
    
    return results;
};
